// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/hubogle/chatcode-server/internal/dal/model"
)

func newPrivateMessage(db *gorm.DB, opts ...gen.DOOption) privateMessage {
	_privateMessage := privateMessage{}

	_privateMessage.privateMessageDo.UseDB(db, opts...)
	_privateMessage.privateMessageDo.UseModel(&model.PrivateMessage{})

	tableName := _privateMessage.privateMessageDo.TableName()
	_privateMessage.ALL = field.NewAsterisk(tableName)
	_privateMessage.ID = field.NewUint64(tableName, "id")
	_privateMessage.SenderID = field.NewInt32(tableName, "sender_id")
	_privateMessage.ReceiverID = field.NewInt32(tableName, "receiver_id")
	_privateMessage.Content = field.NewString(tableName, "content")
	_privateMessage.CreatedAt = field.NewInt64(tableName, "created_at")
	_privateMessage.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_privateMessage.DeletedAt = field.NewInt64(tableName, "deleted_at")

	_privateMessage.fillFieldMap()

	return _privateMessage
}

type privateMessage struct {
	privateMessageDo

	ALL        field.Asterisk
	ID         field.Uint64
	SenderID   field.Int32  // 发送者ID
	ReceiverID field.Int32  // 接收者ID
	Content    field.String // 聊天内容
	CreatedAt  field.Int64
	UpdatedAt  field.Int64
	DeletedAt  field.Int64

	fieldMap map[string]field.Expr
}

func (p privateMessage) Table(newTableName string) *privateMessage {
	p.privateMessageDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p privateMessage) As(alias string) *privateMessage {
	p.privateMessageDo.DO = *(p.privateMessageDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *privateMessage) updateTableName(table string) *privateMessage {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint64(table, "id")
	p.SenderID = field.NewInt32(table, "sender_id")
	p.ReceiverID = field.NewInt32(table, "receiver_id")
	p.Content = field.NewString(table, "content")
	p.CreatedAt = field.NewInt64(table, "created_at")
	p.UpdatedAt = field.NewInt64(table, "updated_at")
	p.DeletedAt = field.NewInt64(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *privateMessage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *privateMessage) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["sender_id"] = p.SenderID
	p.fieldMap["receiver_id"] = p.ReceiverID
	p.fieldMap["content"] = p.Content
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p privateMessage) clone(db *gorm.DB) privateMessage {
	p.privateMessageDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p privateMessage) replaceDB(db *gorm.DB) privateMessage {
	p.privateMessageDo.ReplaceDB(db)
	return p
}

type privateMessageDo struct{ gen.DO }

type IPrivateMessageDo interface {
	gen.SubQuery
	Debug() IPrivateMessageDo
	WithContext(ctx context.Context) IPrivateMessageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPrivateMessageDo
	WriteDB() IPrivateMessageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPrivateMessageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPrivateMessageDo
	Not(conds ...gen.Condition) IPrivateMessageDo
	Or(conds ...gen.Condition) IPrivateMessageDo
	Select(conds ...field.Expr) IPrivateMessageDo
	Where(conds ...gen.Condition) IPrivateMessageDo
	Order(conds ...field.Expr) IPrivateMessageDo
	Distinct(cols ...field.Expr) IPrivateMessageDo
	Omit(cols ...field.Expr) IPrivateMessageDo
	Join(table schema.Tabler, on ...field.Expr) IPrivateMessageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPrivateMessageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPrivateMessageDo
	Group(cols ...field.Expr) IPrivateMessageDo
	Having(conds ...gen.Condition) IPrivateMessageDo
	Limit(limit int) IPrivateMessageDo
	Offset(offset int) IPrivateMessageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPrivateMessageDo
	Unscoped() IPrivateMessageDo
	Create(values ...*model.PrivateMessage) error
	CreateInBatches(values []*model.PrivateMessage, batchSize int) error
	Save(values ...*model.PrivateMessage) error
	First() (*model.PrivateMessage, error)
	Take() (*model.PrivateMessage, error)
	Last() (*model.PrivateMessage, error)
	Find() ([]*model.PrivateMessage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PrivateMessage, err error)
	FindInBatches(result *[]*model.PrivateMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PrivateMessage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPrivateMessageDo
	Assign(attrs ...field.AssignExpr) IPrivateMessageDo
	Joins(fields ...field.RelationField) IPrivateMessageDo
	Preload(fields ...field.RelationField) IPrivateMessageDo
	FirstOrInit() (*model.PrivateMessage, error)
	FirstOrCreate() (*model.PrivateMessage, error)
	FindByPage(offset int, limit int) (result []*model.PrivateMessage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPrivateMessageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p privateMessageDo) Debug() IPrivateMessageDo {
	return p.withDO(p.DO.Debug())
}

func (p privateMessageDo) WithContext(ctx context.Context) IPrivateMessageDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p privateMessageDo) ReadDB() IPrivateMessageDo {
	return p.Clauses(dbresolver.Read)
}

func (p privateMessageDo) WriteDB() IPrivateMessageDo {
	return p.Clauses(dbresolver.Write)
}

func (p privateMessageDo) Session(config *gorm.Session) IPrivateMessageDo {
	return p.withDO(p.DO.Session(config))
}

func (p privateMessageDo) Clauses(conds ...clause.Expression) IPrivateMessageDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p privateMessageDo) Returning(value interface{}, columns ...string) IPrivateMessageDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p privateMessageDo) Not(conds ...gen.Condition) IPrivateMessageDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p privateMessageDo) Or(conds ...gen.Condition) IPrivateMessageDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p privateMessageDo) Select(conds ...field.Expr) IPrivateMessageDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p privateMessageDo) Where(conds ...gen.Condition) IPrivateMessageDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p privateMessageDo) Order(conds ...field.Expr) IPrivateMessageDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p privateMessageDo) Distinct(cols ...field.Expr) IPrivateMessageDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p privateMessageDo) Omit(cols ...field.Expr) IPrivateMessageDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p privateMessageDo) Join(table schema.Tabler, on ...field.Expr) IPrivateMessageDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p privateMessageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPrivateMessageDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p privateMessageDo) RightJoin(table schema.Tabler, on ...field.Expr) IPrivateMessageDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p privateMessageDo) Group(cols ...field.Expr) IPrivateMessageDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p privateMessageDo) Having(conds ...gen.Condition) IPrivateMessageDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p privateMessageDo) Limit(limit int) IPrivateMessageDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p privateMessageDo) Offset(offset int) IPrivateMessageDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p privateMessageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPrivateMessageDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p privateMessageDo) Unscoped() IPrivateMessageDo {
	return p.withDO(p.DO.Unscoped())
}

func (p privateMessageDo) Create(values ...*model.PrivateMessage) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p privateMessageDo) CreateInBatches(values []*model.PrivateMessage, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p privateMessageDo) Save(values ...*model.PrivateMessage) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p privateMessageDo) First() (*model.PrivateMessage, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PrivateMessage), nil
	}
}

func (p privateMessageDo) Take() (*model.PrivateMessage, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PrivateMessage), nil
	}
}

func (p privateMessageDo) Last() (*model.PrivateMessage, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PrivateMessage), nil
	}
}

func (p privateMessageDo) Find() ([]*model.PrivateMessage, error) {
	result, err := p.DO.Find()
	return result.([]*model.PrivateMessage), err
}

func (p privateMessageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PrivateMessage, err error) {
	buf := make([]*model.PrivateMessage, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p privateMessageDo) FindInBatches(result *[]*model.PrivateMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p privateMessageDo) Attrs(attrs ...field.AssignExpr) IPrivateMessageDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p privateMessageDo) Assign(attrs ...field.AssignExpr) IPrivateMessageDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p privateMessageDo) Joins(fields ...field.RelationField) IPrivateMessageDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p privateMessageDo) Preload(fields ...field.RelationField) IPrivateMessageDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p privateMessageDo) FirstOrInit() (*model.PrivateMessage, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PrivateMessage), nil
	}
}

func (p privateMessageDo) FirstOrCreate() (*model.PrivateMessage, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PrivateMessage), nil
	}
}

func (p privateMessageDo) FindByPage(offset int, limit int) (result []*model.PrivateMessage, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p privateMessageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p privateMessageDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p privateMessageDo) Delete(models ...*model.PrivateMessage) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *privateMessageDo) withDO(do gen.Dao) *privateMessageDo {
	p.DO = *do.(*gen.DO)
	return p
}
