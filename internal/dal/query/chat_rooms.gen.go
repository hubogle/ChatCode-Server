// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/hubogle/chatcode-server/internal/dal/model"
)

func newChatRoom(db *gorm.DB, opts ...gen.DOOption) chatRoom {
	_chatRoom := chatRoom{}

	_chatRoom.chatRoomDo.UseDB(db, opts...)
	_chatRoom.chatRoomDo.UseModel(&model.ChatRoom{})

	tableName := _chatRoom.chatRoomDo.TableName()
	_chatRoom.ALL = field.NewAsterisk(tableName)
	_chatRoom.ID = field.NewUint32(tableName, "id")
	_chatRoom.Name = field.NewString(tableName, "name")
	_chatRoom.Password = field.NewString(tableName, "password")
	_chatRoom.Salt = field.NewString(tableName, "salt")
	_chatRoom.CreatedUserID = field.NewInt32(tableName, "created_user_id")
	_chatRoom.CreatedAt = field.NewInt64(tableName, "created_at")
	_chatRoom.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_chatRoom.DeletedAt = field.NewInt64(tableName, "deleted_at")

	_chatRoom.fillFieldMap()

	return _chatRoom
}

type chatRoom struct {
	chatRoomDo

	ALL           field.Asterisk
	ID            field.Uint32
	Name          field.String // 聊天室名称
	Password      field.String // 聊天室密码
	Salt          field.String // 密码盐，消息加密
	CreatedUserID field.Int32  // 创建者ID
	CreatedAt     field.Int64
	UpdatedAt     field.Int64
	DeletedAt     field.Int64

	fieldMap map[string]field.Expr
}

func (c chatRoom) Table(newTableName string) *chatRoom {
	c.chatRoomDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chatRoom) As(alias string) *chatRoom {
	c.chatRoomDo.DO = *(c.chatRoomDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chatRoom) updateTableName(table string) *chatRoom {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint32(table, "id")
	c.Name = field.NewString(table, "name")
	c.Password = field.NewString(table, "password")
	c.Salt = field.NewString(table, "salt")
	c.CreatedUserID = field.NewInt32(table, "created_user_id")
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.UpdatedAt = field.NewInt64(table, "updated_at")
	c.DeletedAt = field.NewInt64(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *chatRoom) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chatRoom) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["password"] = c.Password
	c.fieldMap["salt"] = c.Salt
	c.fieldMap["created_user_id"] = c.CreatedUserID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c chatRoom) clone(db *gorm.DB) chatRoom {
	c.chatRoomDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chatRoom) replaceDB(db *gorm.DB) chatRoom {
	c.chatRoomDo.ReplaceDB(db)
	return c
}

type chatRoomDo struct{ gen.DO }

type IChatRoomDo interface {
	gen.SubQuery
	Debug() IChatRoomDo
	WithContext(ctx context.Context) IChatRoomDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChatRoomDo
	WriteDB() IChatRoomDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChatRoomDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChatRoomDo
	Not(conds ...gen.Condition) IChatRoomDo
	Or(conds ...gen.Condition) IChatRoomDo
	Select(conds ...field.Expr) IChatRoomDo
	Where(conds ...gen.Condition) IChatRoomDo
	Order(conds ...field.Expr) IChatRoomDo
	Distinct(cols ...field.Expr) IChatRoomDo
	Omit(cols ...field.Expr) IChatRoomDo
	Join(table schema.Tabler, on ...field.Expr) IChatRoomDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChatRoomDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChatRoomDo
	Group(cols ...field.Expr) IChatRoomDo
	Having(conds ...gen.Condition) IChatRoomDo
	Limit(limit int) IChatRoomDo
	Offset(offset int) IChatRoomDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChatRoomDo
	Unscoped() IChatRoomDo
	Create(values ...*model.ChatRoom) error
	CreateInBatches(values []*model.ChatRoom, batchSize int) error
	Save(values ...*model.ChatRoom) error
	First() (*model.ChatRoom, error)
	Take() (*model.ChatRoom, error)
	Last() (*model.ChatRoom, error)
	Find() ([]*model.ChatRoom, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChatRoom, err error)
	FindInBatches(result *[]*model.ChatRoom, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ChatRoom) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChatRoomDo
	Assign(attrs ...field.AssignExpr) IChatRoomDo
	Joins(fields ...field.RelationField) IChatRoomDo
	Preload(fields ...field.RelationField) IChatRoomDo
	FirstOrInit() (*model.ChatRoom, error)
	FirstOrCreate() (*model.ChatRoom, error)
	FindByPage(offset int, limit int) (result []*model.ChatRoom, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChatRoomDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c chatRoomDo) Debug() IChatRoomDo {
	return c.withDO(c.DO.Debug())
}

func (c chatRoomDo) WithContext(ctx context.Context) IChatRoomDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chatRoomDo) ReadDB() IChatRoomDo {
	return c.Clauses(dbresolver.Read)
}

func (c chatRoomDo) WriteDB() IChatRoomDo {
	return c.Clauses(dbresolver.Write)
}

func (c chatRoomDo) Session(config *gorm.Session) IChatRoomDo {
	return c.withDO(c.DO.Session(config))
}

func (c chatRoomDo) Clauses(conds ...clause.Expression) IChatRoomDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chatRoomDo) Returning(value interface{}, columns ...string) IChatRoomDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chatRoomDo) Not(conds ...gen.Condition) IChatRoomDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chatRoomDo) Or(conds ...gen.Condition) IChatRoomDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chatRoomDo) Select(conds ...field.Expr) IChatRoomDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chatRoomDo) Where(conds ...gen.Condition) IChatRoomDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chatRoomDo) Order(conds ...field.Expr) IChatRoomDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chatRoomDo) Distinct(cols ...field.Expr) IChatRoomDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chatRoomDo) Omit(cols ...field.Expr) IChatRoomDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chatRoomDo) Join(table schema.Tabler, on ...field.Expr) IChatRoomDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chatRoomDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChatRoomDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chatRoomDo) RightJoin(table schema.Tabler, on ...field.Expr) IChatRoomDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chatRoomDo) Group(cols ...field.Expr) IChatRoomDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chatRoomDo) Having(conds ...gen.Condition) IChatRoomDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chatRoomDo) Limit(limit int) IChatRoomDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chatRoomDo) Offset(offset int) IChatRoomDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chatRoomDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChatRoomDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chatRoomDo) Unscoped() IChatRoomDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chatRoomDo) Create(values ...*model.ChatRoom) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chatRoomDo) CreateInBatches(values []*model.ChatRoom, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chatRoomDo) Save(values ...*model.ChatRoom) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chatRoomDo) First() (*model.ChatRoom, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatRoom), nil
	}
}

func (c chatRoomDo) Take() (*model.ChatRoom, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatRoom), nil
	}
}

func (c chatRoomDo) Last() (*model.ChatRoom, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatRoom), nil
	}
}

func (c chatRoomDo) Find() ([]*model.ChatRoom, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChatRoom), err
}

func (c chatRoomDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChatRoom, err error) {
	buf := make([]*model.ChatRoom, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chatRoomDo) FindInBatches(result *[]*model.ChatRoom, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chatRoomDo) Attrs(attrs ...field.AssignExpr) IChatRoomDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chatRoomDo) Assign(attrs ...field.AssignExpr) IChatRoomDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chatRoomDo) Joins(fields ...field.RelationField) IChatRoomDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chatRoomDo) Preload(fields ...field.RelationField) IChatRoomDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chatRoomDo) FirstOrInit() (*model.ChatRoom, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatRoom), nil
	}
}

func (c chatRoomDo) FirstOrCreate() (*model.ChatRoom, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatRoom), nil
	}
}

func (c chatRoomDo) FindByPage(offset int, limit int) (result []*model.ChatRoom, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chatRoomDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chatRoomDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chatRoomDo) Delete(models ...*model.ChatRoom) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chatRoomDo) withDO(do gen.Dao) *chatRoomDo {
	c.DO = *do.(*gen.DO)
	return c
}
