// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/hubogle/chatcode-server/internal/dal/model"
)

func newUserChatRoom(db *gorm.DB, opts ...gen.DOOption) userChatRoom {
	_userChatRoom := userChatRoom{}

	_userChatRoom.userChatRoomDo.UseDB(db, opts...)
	_userChatRoom.userChatRoomDo.UseModel(&model.UserChatRoom{})

	tableName := _userChatRoom.userChatRoomDo.TableName()
	_userChatRoom.ALL = field.NewAsterisk(tableName)
	_userChatRoom.ID = field.NewUint32(tableName, "id")
	_userChatRoom.UserID = field.NewInt32(tableName, "user_id")
	_userChatRoom.RoomID = field.NewInt32(tableName, "room_id")
	_userChatRoom.JoinedAt = field.NewInt64(tableName, "joined_at")
	_userChatRoom.CreatedAt = field.NewInt64(tableName, "created_at")
	_userChatRoom.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_userChatRoom.DeletedAt = field.NewInt64(tableName, "deleted_at")

	_userChatRoom.fillFieldMap()

	return _userChatRoom
}

type userChatRoom struct {
	userChatRoomDo

	ALL       field.Asterisk
	ID        field.Uint32
	UserID    field.Int32 // 用户ID
	RoomID    field.Int32 // 房间ID
	JoinedAt  field.Int64
	CreatedAt field.Int64
	UpdatedAt field.Int64
	DeletedAt field.Int64

	fieldMap map[string]field.Expr
}

func (u userChatRoom) Table(newTableName string) *userChatRoom {
	u.userChatRoomDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userChatRoom) As(alias string) *userChatRoom {
	u.userChatRoomDo.DO = *(u.userChatRoomDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userChatRoom) updateTableName(table string) *userChatRoom {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint32(table, "id")
	u.UserID = field.NewInt32(table, "user_id")
	u.RoomID = field.NewInt32(table, "room_id")
	u.JoinedAt = field.NewInt64(table, "joined_at")
	u.CreatedAt = field.NewInt64(table, "created_at")
	u.UpdatedAt = field.NewInt64(table, "updated_at")
	u.DeletedAt = field.NewInt64(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userChatRoom) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userChatRoom) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["room_id"] = u.RoomID
	u.fieldMap["joined_at"] = u.JoinedAt
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userChatRoom) clone(db *gorm.DB) userChatRoom {
	u.userChatRoomDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userChatRoom) replaceDB(db *gorm.DB) userChatRoom {
	u.userChatRoomDo.ReplaceDB(db)
	return u
}

type userChatRoomDo struct{ gen.DO }

type IUserChatRoomDo interface {
	gen.SubQuery
	Debug() IUserChatRoomDo
	WithContext(ctx context.Context) IUserChatRoomDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserChatRoomDo
	WriteDB() IUserChatRoomDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserChatRoomDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserChatRoomDo
	Not(conds ...gen.Condition) IUserChatRoomDo
	Or(conds ...gen.Condition) IUserChatRoomDo
	Select(conds ...field.Expr) IUserChatRoomDo
	Where(conds ...gen.Condition) IUserChatRoomDo
	Order(conds ...field.Expr) IUserChatRoomDo
	Distinct(cols ...field.Expr) IUserChatRoomDo
	Omit(cols ...field.Expr) IUserChatRoomDo
	Join(table schema.Tabler, on ...field.Expr) IUserChatRoomDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserChatRoomDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserChatRoomDo
	Group(cols ...field.Expr) IUserChatRoomDo
	Having(conds ...gen.Condition) IUserChatRoomDo
	Limit(limit int) IUserChatRoomDo
	Offset(offset int) IUserChatRoomDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserChatRoomDo
	Unscoped() IUserChatRoomDo
	Create(values ...*model.UserChatRoom) error
	CreateInBatches(values []*model.UserChatRoom, batchSize int) error
	Save(values ...*model.UserChatRoom) error
	First() (*model.UserChatRoom, error)
	Take() (*model.UserChatRoom, error)
	Last() (*model.UserChatRoom, error)
	Find() ([]*model.UserChatRoom, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserChatRoom, err error)
	FindInBatches(result *[]*model.UserChatRoom, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserChatRoom) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserChatRoomDo
	Assign(attrs ...field.AssignExpr) IUserChatRoomDo
	Joins(fields ...field.RelationField) IUserChatRoomDo
	Preload(fields ...field.RelationField) IUserChatRoomDo
	FirstOrInit() (*model.UserChatRoom, error)
	FirstOrCreate() (*model.UserChatRoom, error)
	FindByPage(offset int, limit int) (result []*model.UserChatRoom, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserChatRoomDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userChatRoomDo) Debug() IUserChatRoomDo {
	return u.withDO(u.DO.Debug())
}

func (u userChatRoomDo) WithContext(ctx context.Context) IUserChatRoomDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userChatRoomDo) ReadDB() IUserChatRoomDo {
	return u.Clauses(dbresolver.Read)
}

func (u userChatRoomDo) WriteDB() IUserChatRoomDo {
	return u.Clauses(dbresolver.Write)
}

func (u userChatRoomDo) Session(config *gorm.Session) IUserChatRoomDo {
	return u.withDO(u.DO.Session(config))
}

func (u userChatRoomDo) Clauses(conds ...clause.Expression) IUserChatRoomDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userChatRoomDo) Returning(value interface{}, columns ...string) IUserChatRoomDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userChatRoomDo) Not(conds ...gen.Condition) IUserChatRoomDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userChatRoomDo) Or(conds ...gen.Condition) IUserChatRoomDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userChatRoomDo) Select(conds ...field.Expr) IUserChatRoomDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userChatRoomDo) Where(conds ...gen.Condition) IUserChatRoomDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userChatRoomDo) Order(conds ...field.Expr) IUserChatRoomDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userChatRoomDo) Distinct(cols ...field.Expr) IUserChatRoomDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userChatRoomDo) Omit(cols ...field.Expr) IUserChatRoomDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userChatRoomDo) Join(table schema.Tabler, on ...field.Expr) IUserChatRoomDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userChatRoomDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserChatRoomDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userChatRoomDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserChatRoomDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userChatRoomDo) Group(cols ...field.Expr) IUserChatRoomDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userChatRoomDo) Having(conds ...gen.Condition) IUserChatRoomDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userChatRoomDo) Limit(limit int) IUserChatRoomDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userChatRoomDo) Offset(offset int) IUserChatRoomDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userChatRoomDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserChatRoomDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userChatRoomDo) Unscoped() IUserChatRoomDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userChatRoomDo) Create(values ...*model.UserChatRoom) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userChatRoomDo) CreateInBatches(values []*model.UserChatRoom, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userChatRoomDo) Save(values ...*model.UserChatRoom) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userChatRoomDo) First() (*model.UserChatRoom, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserChatRoom), nil
	}
}

func (u userChatRoomDo) Take() (*model.UserChatRoom, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserChatRoom), nil
	}
}

func (u userChatRoomDo) Last() (*model.UserChatRoom, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserChatRoom), nil
	}
}

func (u userChatRoomDo) Find() ([]*model.UserChatRoom, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserChatRoom), err
}

func (u userChatRoomDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserChatRoom, err error) {
	buf := make([]*model.UserChatRoom, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userChatRoomDo) FindInBatches(result *[]*model.UserChatRoom, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userChatRoomDo) Attrs(attrs ...field.AssignExpr) IUserChatRoomDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userChatRoomDo) Assign(attrs ...field.AssignExpr) IUserChatRoomDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userChatRoomDo) Joins(fields ...field.RelationField) IUserChatRoomDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userChatRoomDo) Preload(fields ...field.RelationField) IUserChatRoomDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userChatRoomDo) FirstOrInit() (*model.UserChatRoom, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserChatRoom), nil
	}
}

func (u userChatRoomDo) FirstOrCreate() (*model.UserChatRoom, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserChatRoom), nil
	}
}

func (u userChatRoomDo) FindByPage(offset int, limit int) (result []*model.UserChatRoom, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userChatRoomDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userChatRoomDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userChatRoomDo) Delete(models ...*model.UserChatRoom) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userChatRoomDo) withDO(do gen.Dao) *userChatRoomDo {
	u.DO = *do.(*gen.DO)
	return u
}
