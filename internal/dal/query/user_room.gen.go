// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/hubogle/chatcode-server/internal/dal/model"
)

func newUserRoom(db *gorm.DB, opts ...gen.DOOption) userRoom {
	_userRoom := userRoom{}

	_userRoom.userRoomDo.UseDB(db, opts...)
	_userRoom.userRoomDo.UseModel(&model.UserRoom{})

	tableName := _userRoom.userRoomDo.TableName()
	_userRoom.ALL = field.NewAsterisk(tableName)
	_userRoom.ID = field.NewUint32(tableName, "id")
	_userRoom.UserUID = field.NewUint32(tableName, "user_uid")
	_userRoom.RoomUID = field.NewString(tableName, "room_uid")
	_userRoom.RoomType = field.NewInt32(tableName, "room_type")
	_userRoom.JoinedAt = field.NewInt64(tableName, "joined_at")
	_userRoom.CreatedAt = field.NewInt64(tableName, "created_at")
	_userRoom.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_userRoom.DeletedAt = field.NewInt64(tableName, "deleted_at")

	_userRoom.fillFieldMap()

	return _userRoom
}

type userRoom struct {
	userRoomDo

	ALL       field.Asterisk
	ID        field.Uint32
	UserUID   field.Uint32 // 用户ID
	RoomUID   field.String // 房间ID
	RoomType  field.Int32  // 房间类型 1:群聊房间 2:私聊房间
	JoinedAt  field.Int64
	CreatedAt field.Int64
	UpdatedAt field.Int64
	DeletedAt field.Int64

	fieldMap map[string]field.Expr
}

func (u userRoom) Table(newTableName string) *userRoom {
	u.userRoomDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRoom) As(alias string) *userRoom {
	u.userRoomDo.DO = *(u.userRoomDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRoom) updateTableName(table string) *userRoom {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint32(table, "id")
	u.UserUID = field.NewUint32(table, "user_uid")
	u.RoomUID = field.NewString(table, "room_uid")
	u.RoomType = field.NewInt32(table, "room_type")
	u.JoinedAt = field.NewInt64(table, "joined_at")
	u.CreatedAt = field.NewInt64(table, "created_at")
	u.UpdatedAt = field.NewInt64(table, "updated_at")
	u.DeletedAt = field.NewInt64(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userRoom) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRoom) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_uid"] = u.UserUID
	u.fieldMap["room_uid"] = u.RoomUID
	u.fieldMap["room_type"] = u.RoomType
	u.fieldMap["joined_at"] = u.JoinedAt
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userRoom) clone(db *gorm.DB) userRoom {
	u.userRoomDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRoom) replaceDB(db *gorm.DB) userRoom {
	u.userRoomDo.ReplaceDB(db)
	return u
}

type userRoomDo struct{ gen.DO }

type IUserRoomDo interface {
	gen.SubQuery
	Debug() IUserRoomDo
	WithContext(ctx context.Context) IUserRoomDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRoomDo
	WriteDB() IUserRoomDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRoomDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRoomDo
	Not(conds ...gen.Condition) IUserRoomDo
	Or(conds ...gen.Condition) IUserRoomDo
	Select(conds ...field.Expr) IUserRoomDo
	Where(conds ...gen.Condition) IUserRoomDo
	Order(conds ...field.Expr) IUserRoomDo
	Distinct(cols ...field.Expr) IUserRoomDo
	Omit(cols ...field.Expr) IUserRoomDo
	Join(table schema.Tabler, on ...field.Expr) IUserRoomDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRoomDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRoomDo
	Group(cols ...field.Expr) IUserRoomDo
	Having(conds ...gen.Condition) IUserRoomDo
	Limit(limit int) IUserRoomDo
	Offset(offset int) IUserRoomDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRoomDo
	Unscoped() IUserRoomDo
	Create(values ...*model.UserRoom) error
	CreateInBatches(values []*model.UserRoom, batchSize int) error
	Save(values ...*model.UserRoom) error
	First() (*model.UserRoom, error)
	Take() (*model.UserRoom, error)
	Last() (*model.UserRoom, error)
	Find() ([]*model.UserRoom, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRoom, err error)
	FindInBatches(result *[]*model.UserRoom, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRoom) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRoomDo
	Assign(attrs ...field.AssignExpr) IUserRoomDo
	Joins(fields ...field.RelationField) IUserRoomDo
	Preload(fields ...field.RelationField) IUserRoomDo
	FirstOrInit() (*model.UserRoom, error)
	FirstOrCreate() (*model.UserRoom, error)
	FindByPage(offset int, limit int) (result []*model.UserRoom, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRoomDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRoomDo) Debug() IUserRoomDo {
	return u.withDO(u.DO.Debug())
}

func (u userRoomDo) WithContext(ctx context.Context) IUserRoomDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRoomDo) ReadDB() IUserRoomDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRoomDo) WriteDB() IUserRoomDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRoomDo) Session(config *gorm.Session) IUserRoomDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRoomDo) Clauses(conds ...clause.Expression) IUserRoomDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRoomDo) Returning(value interface{}, columns ...string) IUserRoomDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRoomDo) Not(conds ...gen.Condition) IUserRoomDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRoomDo) Or(conds ...gen.Condition) IUserRoomDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRoomDo) Select(conds ...field.Expr) IUserRoomDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRoomDo) Where(conds ...gen.Condition) IUserRoomDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRoomDo) Order(conds ...field.Expr) IUserRoomDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRoomDo) Distinct(cols ...field.Expr) IUserRoomDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRoomDo) Omit(cols ...field.Expr) IUserRoomDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRoomDo) Join(table schema.Tabler, on ...field.Expr) IUserRoomDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRoomDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRoomDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRoomDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRoomDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRoomDo) Group(cols ...field.Expr) IUserRoomDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRoomDo) Having(conds ...gen.Condition) IUserRoomDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRoomDo) Limit(limit int) IUserRoomDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRoomDo) Offset(offset int) IUserRoomDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRoomDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRoomDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRoomDo) Unscoped() IUserRoomDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRoomDo) Create(values ...*model.UserRoom) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRoomDo) CreateInBatches(values []*model.UserRoom, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRoomDo) Save(values ...*model.UserRoom) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRoomDo) First() (*model.UserRoom, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoom), nil
	}
}

func (u userRoomDo) Take() (*model.UserRoom, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoom), nil
	}
}

func (u userRoomDo) Last() (*model.UserRoom, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoom), nil
	}
}

func (u userRoomDo) Find() ([]*model.UserRoom, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRoom), err
}

func (u userRoomDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRoom, err error) {
	buf := make([]*model.UserRoom, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRoomDo) FindInBatches(result *[]*model.UserRoom, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRoomDo) Attrs(attrs ...field.AssignExpr) IUserRoomDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRoomDo) Assign(attrs ...field.AssignExpr) IUserRoomDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRoomDo) Joins(fields ...field.RelationField) IUserRoomDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRoomDo) Preload(fields ...field.RelationField) IUserRoomDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRoomDo) FirstOrInit() (*model.UserRoom, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoom), nil
	}
}

func (u userRoomDo) FirstOrCreate() (*model.UserRoom, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoom), nil
	}
}

func (u userRoomDo) FindByPage(offset int, limit int) (result []*model.UserRoom, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRoomDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRoomDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRoomDo) Delete(models ...*model.UserRoom) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRoomDo) withDO(do gen.Dao) *userRoomDo {
	u.DO = *do.(*gen.DO)
	return u
}
